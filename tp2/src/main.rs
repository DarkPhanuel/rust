use std::io;

struct CompteBancaire {
    nom: String,
    solde: f64,
}

impl CompteBancaire {
    fn afficher(&self) {
        println!("Compte de {} : {:.2} ‚Ç¨", self.nom, self.solde);
    }

    fn deposer(&mut self, montant: f64) {
        if montant <= 0.0 {
            println!("‚ö†Ô∏è  Montant invalide. D√©p√¥t refus√©.");
        } else {
            self.solde += montant;
            println!("‚úÖ +{:.2} ‚Ç¨ d√©pos√©s sur le compte de {}.", montant, self.nom);
        }
    }

    fn retirer(&mut self, montant: f64) {
        if montant <= 0.0 {
            println!("‚ö†Ô∏è  Le montant doit √™tre positif.");
        } else if self.solde >= montant {
            self.solde -= montant;
            println!("‚úÖ -{:.2} ‚Ç¨ retir√©s du compte de {}.", montant, self.nom);
        } else {
            println!("‚ùå Solde insuffisant !");
        }
    }

    fn renommer(self, nouveau_nom: &str) -> CompteBancaire {
        CompteBancaire {
            nom: nouveau_nom.to_string(),
            solde: self.solde,
        }
    }

    fn fermer(self) {
        println!(
            "üßæ Le compte de {} est ferm√©. Dernier solde : {:.2} ‚Ç¨",
            self.nom, self.solde
        );
    }
}

// Fonction utilitaire pour lire une ligne depuis l'utilisateur
fn lire_input() -> String {
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Erreur de lecture");
    input.trim().to_string()
}

fn main() {
    let mut comptes: Vec<CompteBancaire> = Vec::new();

    loop {
        println!("\n--- MENU ---");
        println!("1. Cr√©er un compte");
        println!("2. Afficher les comptes");
        println!("3. D√©poser de l'argent");
        println!("4. Retirer de l'argent");
        println!("5. Renommer un compte");
        println!("6. Fermer un compte");
        println!("7. Quitter");

        println!("Entrez votre choix :");
        let choix = lire_input();

        match choix.as_str() {
            "1" => {
                println!("Nom du nouveau compte :");
                let nom = lire_input();
                comptes.push(CompteBancaire { nom, solde: 0.0 });
                println!("‚úÖ Compte cr√©√© avec succ√®s !");
            }

            "2" => {
                println!("\n--- Comptes enregistr√©s ---");
                for (i, compte) in comptes.iter().enumerate() {
                    print!("{} - ", i + 1);
                    compte.afficher();
                }
            }

            "3" => {
                println!("Num√©ro du compte pour d√©poser :");
                let index = lire_input().parse::<usize>().unwrap_or(0);
                if let Some(compte) = comptes.get_mut(index - 1) {
                    println!("Montant √† d√©poser :");
                    let montant = lire_input().parse::<f64>().unwrap_or(-1.0);
                    compte.deposer(montant);
                } else {
                    println!("‚ùå Compte non trouv√© !");
                }
            }

            "4" => {
                println!("Num√©ro du compte pour retirer :");
                let index = lire_input().parse::<usize>().unwrap_or(0);
                if let Some(compte) = comptes.get_mut(index - 1) {
                    println!("Montant √† retirer :");
                    let montant = lire_input().parse::<f64>().unwrap_or(-1.0);
                    compte.retirer(montant);
                } else {
                    println!("‚ùå Compte non trouv√© !");
                }
            }

            "5" => {
                println!("Num√©ro du compte √† renommer :");
                let index = lire_input().parse::<usize>().unwrap_or(0);
                if index == 0 || index > comptes.len() {
                    println!("‚ùå Compte invalide.");
                    continue;
                }

                println!("Nouveau nom du compte :");
                let nouveau_nom = lire_input();

                // remplacement dans le vecteur
                let ancien = comptes.remove(index - 1);
                let nouveau = ancien.renommer(&nouveau_nom);
                comptes.insert(index - 1, nouveau);

                println!("‚úÖ Compte renomm√© avec succ√®s !");
            }

            "6" => {
                println!("Num√©ro du compte √† fermer :");
                let index = lire_input().parse::<usize>().unwrap_or(0);
                if index == 0 || index > comptes.len() {
                    println!("‚ùå Compte invalide.");
                    continue;
                }

                let compte = comptes.remove(index - 1);
                compte.fermer();
            }

            "7" => {
                println!("üëã Merci d‚Äôavoir utilis√© notre syst√®me bancaire !");
                break;
            }

            _ => {
                println!("‚ùå Option invalide. Veuillez choisir un num√©ro entre 1 et 7.");
            }
        }
    }
}
